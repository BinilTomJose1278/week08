# .github/workflows/ci-development.yml
name: CI - Development Branch

on:
  push:
    branches: [ development ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # wk09cacrbinil.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  K8S_NS: ecommerce
  ACR_NAME: wk09cacrbinil

jobs:
  test-and-build-backend:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Test Product Service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Test Order Service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR (Azure AD)
        run: az acr login --name $ACR_NAME

      - name: Build & Push Product Service
        run: |
          docker build -t wk09cacrbinil.azurecr.io/product_service:dev-${{ env.IMAGE_TAG }} ./backend/product_service/
          docker build -t wk09cacrbinil.azurecr.io/product_service:dev-latest ./backend/product_service/
          docker push wk09cacrbinil.azurecr.io/product_service:dev-${{ env.IMAGE_TAG }}
          docker push wk09cacrbinil.azurecr.io/product_service:dev-latest

      - name: Build & Push Order Service
        run: |
          docker build -t wk09cacrbinil.azurecr.io/order_service:dev-${{ env.IMAGE_TAG }} ./backend/order_service/
          docker build -t wk09cacrbinil.azurecr.io/order_service:dev-latest ./backend/order_service/
          docker push wk09cacrbinil.azurecr.io/order_service:dev-${{ env.IMAGE_TAG }}
          docker push wk09cacrbinil.azurecr.io/order_service:dev-latest

      - name: Azure Logout
        if: always()
        run: |
          az logout || true

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR (Azure AD)
        run: az acr login --name $ACR_NAME

      - name: Build & Push Frontend
        run: |
          docker build -t wk09cacrbinil.azurecr.io/frontend:dev-${{ env.IMAGE_TAG }} ./frontend/
          docker build -t wk09cacrbinil.azurecr.io/frontend:dev-latest ./frontend/
          docker push wk09cacrbinil.azurecr.io/frontend:dev-${{ env.IMAGE_TAG }}
          docker push wk09cacrbinil.azurecr.io/frontend:dev-latest

      - name: Azure Logout
        if: always()
        run: |
          az logout || true

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build-backend, build-frontend]
    environment: staging   # <-- must match your environment name exactly

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: AKS context (staging)
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Verify ACR images
        run: |
          az acr repository list --name $ACR_NAME --output table
          az acr repository show-tags --name $ACR_NAME --repository product_service --output table
          az acr repository show-tags --name $ACR_NAME --repository order_service --output table
          az acr repository show-tags --name $ACR_NAME --repository frontend --output table

      - name: Deploy backend (staging)
        run: |
          cd k8s/
          # point to dev-latest
          sed -i "s|image: .*product_service:.*|image: wk09cacrbinil.azurecr.io/product_service:dev-latest|g" product-service.yaml
          sed -i "s|image: .*order_service:.*|image: wk09cacrbinil.azurecr.io/order_service:dev-latest|g" order-service.yaml

          kubectl apply -f configmaps.yaml -n $K8S_NS
          kubectl apply -f secrets.yaml -n $K8S_NS
          kubectl apply -f product-db.yaml -n $K8S_NS
          kubectl apply -f order-db.yaml -n $K8S_NS
          kubectl apply -f product-service.yaml -n $K8S_NS
          kubectl apply -f order-service.yaml -n $K8S_NS

      - name: Wait for backend deployments
        run: |
          kubectl get pods -n $K8S_NS
          kubectl get events -n $K8S_NS --sort-by=.lastTimestamp | tail -20

          kubectl rollout status deploy/product-service -n $K8S_NS --timeout=300s
          kubectl rollout status deploy/order-service   -n $K8S_NS --timeout=300s

      - name: Get backend ClusterIP/External IPs
        id: get-backend-ips
        run: |
          # if your product/order services are ClusterIP, leave as ClusterIP references
          PRODUCT_HOST="http://product-service.$K8S_NS.svc.cluster.local:8000"
          ORDER_HOST="http://order-service.$K8S_NS.svc.cluster.local:8001"

          echo "product_ip=${PRODUCT_HOST}" >> $GITHUB_OUTPUT
          echo "order_ip=${ORDER_HOST}"   >> $GITHUB_OUTPUT

      - name: Deploy frontend (staging)
        run: |
          # inject backend URLs into frontend sources (if that's how your app is wired)
          sed -i "s|_PRODUCT_API_URL_|${{ steps.get-backend-ips.outputs.product_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ steps.get-backend-ips.outputs.order_ip }}|g" frontend/main.js

          # rebuild with injected config and push
          docker build -t wk09cacrbinil.azurecr.io/frontend:dev-latest ./frontend/
          az acr login --name $ACR_NAME
          docker push wk09cacrbinil.azurecr.io/frontend:dev-latest

          # update manifest and apply
          sed -i "s|image: .*frontend:.*|image: wk09cacrbinil.azurecr.io/frontend:dev-latest|g" k8s/frontend.yaml
          kubectl apply -f k8s/frontend.yaml -n $K8S_NS

      - name: Wait for frontend
        run: |
          kubectl rollout status deploy/frontend -n $K8S_NS --timeout=300s
          kubectl get svc frontend -n $K8S_NS -o wide

      - name: Smoke checks
        run: |
          # If frontend is a LoadBalancer:
          FRONTEND_IP=$(kubectl get svc frontend -n $K8S_NS -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Frontend at: http://$FRONTEND_IP"
          # basic health checks via backends
          curl -f ${{ steps.get-backend-ips.outputs.product_ip }}/health
          curl -f ${{ steps.get-backend-ips.outputs.order_ip }}/health
          echo "All good âœ…"