# .github/workflows/frontend-cd.yml
name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service (e.g., http://X.X.X.X:8000)'
        required: true
        default: 'http://20.167.21.165:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://20.167.110.253:8001'
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        default: 'binilweek08aks2'
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        default: 'rg-week08'

  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'k8s/frontend.yaml'
      - '.github/workflows/frontend-cd.yml'

env:
  # keep the same convention as backend_ci.yml
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login (SP)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to your ACR (same style you used in backend_ci)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      # Inject backend URLs into frontend/main.js (ensure placeholders exist)
      - name: Inject backend IPs into frontend/main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip || 'http://20.167.21.165:8000' }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip   || 'http://20.167.110.253:8001' }}|g" frontend/main.js
          echo "--- main.js after injection ---"
          cat frontend/main.js
          echo "--------------------------------"

      # Build & push (single-line to avoid CRLF issues)
      - name: Build & push frontend image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          docker push  ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      # Get kube context (use same approach across workflows)
      - name: Set AKS context
        run: az aks get-credentials -g "${{ inputs.aks_resource_group || 'rg-week08' }}" -n "${{ inputs.aks_cluster_name || 'binilweek08aks2' }}" --overwrite-existing

      # Ensure image reference in manifest points to your ACR
      - name: Patch manifest image (safety)
        run: |
          sed -i "s|image: .*frontend:.*|image: ${{ env.ACR_LOGIN_SERVER }}/frontend:latest|g" k8s/frontend.yaml
          echo "--- k8s/frontend.yaml ---"
          cat k8s/frontend.yaml
          echo "-------------------------"

      - name: Deploy frontend
        run: |
          kubectl apply -f k8s/frontend.yaml
          kubectl rollout status deployment/frontend-w08e1 --timeout=180s || true
